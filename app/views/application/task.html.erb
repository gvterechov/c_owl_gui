<% title t('index.title') %>

<div class="ui stackable menu">
  <!--
  <div class="header item">
    ISWC Demo
  </div>
  -->

  <div class="right menu">
    <div class="item">
      <%= language_switcher %>
    </div>
    <a class="item"><%= t('sign_in') %></a>
  </div>
</div>


<div class="ui aligned basic segment">
<!--  <h1 class="ui header"><%#= t('index.h1') %></h1>-->

  <div class="ui form">
    <div class="field">
      <label><%= t('index.algorithm').html_safe %></label>

<!--      <div class="ui segment" style="padding-top: 40px;">-->
<!--        <div class="ui top left attached label">Algorithm (<a href="#">Quick syntax guide</a>)</div>-->
        <style>
            .CodeMirror {
                height: auto;
            }
        </style>
        <textarea id="alg"></textarea>
<!--      </div>-->
    </div>
    <div class="field">
      <label><%= t('index.trace') %></label>


      <div class="ui error mini message">
        <i class="close icon"></i>
        <div class="header">
          During execution of loop 'waiting', a new iteration must not start because condition 'not_green' is false.
        </div>
      </div>

      <!-- variant 1 -->
      <span style="display: none;">
        <textarea id="trace"></textarea>
      </span>

      <!-- variant 2 -->
      <style type="text/css" media="screen">
          span.string, span.atom { color: #f08; font-style: italic; font-weight: bold; }
          span.comment { color: #262; font-style: italic; line-height: 1em; }
          span.meta { color: #555; font-style: italic; line-height: 1em; }
          span.variable { color: #700; text-decoration: underline; }
          span.variable-2 { color: #b11; }
          span.struct { color: #07c; font-weight: bold; }
          span.number { color: #f00; font-weight: bold; }
          span.program { color: #f70; font-weight: bold; }
          span.function { color: #707; font-weight: bold; }
          span.action { color: #077; font-weight: bold; }
          span.qualifier { color: #555; }
          span.keyword { color: #00a; font-weight: bold; }
          span.builtin { color: #30a; }
          span.link { color: #762; }

          span.warning { background-color: #ff9; }
          span.error { background-color: #fdd; }

          span.cm-keyword,
          span.cm-variable {
              cursor: pointer;
              background: #b3f172;
              /*background: #f2db90; */
              /*background: #95ca5e; */
              /*background: #0aeae0; */
              border-radius: 3px;
              /*border: 2px dashed;*/
          }
          span.cm-keyword:hover,
          span.cm-variable:hover
          {
              background: #95ca5e;
              border-radius: 3px;
              /*border: 3px dashed;*/
          }
      </style>

      <%
        trace = [
          ['<span class=""><span class="program">program</span> <span class="keyword">began</span></span>'],
          ['&nbsp;<span class=""><span class="struct">loop</span> <span class="variable">waiting</span> <span class="keyword">began </span><span class="number">1st</span> time</span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">condition</span> <span class="struct">of</span> <span class="struct">loop</span> (<span class="variable">not_green</span>) <span class="keyword">evaluated </span><span class="number">1st</span> time - <span class="atom warning">false</span></span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">iteration</span> <span class="number">1</span> <span class="struct">of</span> <span class="struct">loop</span> <span class="variable">waiting</span> <span class="keyword">began</span></span>    ', 'ui red tertiary inverted segment'],
          ['&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">alternative</span> <span class="variable">over_color</span> <span class="keyword">began </span><span class="number">1st</span> time</span>', 'ui red tertiary inverted segment'],
          ['&nbsp;&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">condition</span> <span class="struct">of</span> <span class="struct">alternative</span> (<span class="variable">red</span>) <span class="keyword">evaluated </span><span class="number">1st</span> time - <span class="atom">true</span></span>'],
          ['&nbsp;&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">branch</span> <span class="struct">of</span> <span class="struct">condition</span> (<span class="variable">red</span>) <span class="keyword">began </span><span class="number">1st</span> time</span>'],
          ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=""><span class="variable">wait</span> <span class="keyword">executed </span><span class="number">1st</span> time</span>'],
          ['&nbsp;&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">branch</span> <span class="struct">of</span> <span class="struct">condition</span> (<span class="variable">red</span>) <span class="keyword">ended </span><span class="number">1st</span> time</span>'],
          ['&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">alternative</span> <span class="variable">over_color</span> <span class="keyword">ended </span><span class="number">1st</span> time</span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">iteration</span> <span class="number">1</span> <span class="struct">of</span> <span class="struct">loop</span> <span class="variable">waiting</span> <span class="keyword">ended</span></span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">condition</span> <span class="struct">of</span> <span class="struct">loop</span> (<span class="variable">not_green</span>) <span class="keyword">evaluated </span><span class="number">2nd</span> time - <span class="atom">true</span></span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">iteration</span> <span class="number">2</span> <span class="struct">of</span> <span class="struct">loop</span> <span class="variable">waiting</span> <span class="keyword">began</span></span>'],
          ['&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">alternative</span> <span class="variable">over_color</span> <span class="keyword">began </span><span class="number">2nd</span> time</span>'],
          ['&nbsp;&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">condition</span> <span class="struct">of</span> <span class="struct">alternative</span> (<span class="variable">red</span>) <span class="keyword">evaluated </span><span class="number">2nd</span> time - <span class="atom">false</span></span>'],
          ['&nbsp;&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">condition</span> <span class="struct">of</span> <span class="struct">alternative</span> (<span class="variable">yellow</span>) <span class="keyword">evaluated </span><span class="number">1st</span> time - <span class="atom">false</span></span>'],
          ['&nbsp;&nbsp;&nbsp;<span class=""><span class="struct">alternative</span> <span class="variable">over_color</span> <span class="keyword">ended </span><span class="number">2nd</span> time</span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">iteration</span> <span class="number">2</span> <span class="struct">of</span> <span class="struct">loop</span> <span class="variable">waiting</span> <span class="keyword">ended</span></span>'],
          ['&nbsp;&nbsp;<span class=""><span class="struct">condition</span> <span class="struct">of</span> <span class="struct">loop</span> (<span class="variable">not_green</span>) <span class="keyword">evaluated </span><span class="number">3rd</span> time - <span class="atom">false</span></span>'],
          ['&nbsp;<span class=""><span class="struct">loop</span> <span class="variable">waiting</span> <span class="keyword">ended </span><span class="number">1st</span> time</span>'],
          ['<span class=""><span class="program">program</span>']
        ]
      %>

      <table class="ui very compact small selectable celled definition table">
        <tbody>
        <% trace.each do |elem| %>
          <tr class="<%= elem&.last if elem.count > 1 %>">
            <td class="collapsing" style="cursor: pointer;">
              <i class="bars icon"></i>
            </td>
            <td
              <%= 'data-tooltip="During execution of loop \'waiting\', a new iteration must not start because condition \'not_green\' is false." data-position="top left"'.html_safe if elem.count > 1  %>
            >
              <%= elem.first.html_safe %>
            </td>
          </tr>
        <% end %>
        </tbody>
        <tfoot class="full-width">
          <tr>
            <th colspan="2">
              <div class="ui green mini button">
                <i class="check square icon"></i> <%= t('check') %>
              </div>
            </th>
          </tr>
        </tfoot>
      </table>
    </div>
  </div>
</div>

<div class="ui inverted vertical footer segment">
  <%= t('index.copyright') %>
</div>

<!-- first modal -->
<div class="ui first tiny modal">
  <i class="close icon"></i>
  <div class="header">
    Let's work this out
  </div>
  <div class="content">
      <%
        variants = [
          'the number of completed iterations;',
          'the value of loop\'s control condition;',
          'the value of the loop counter;',
          'the first statement of the loop\'s body.'
        ]
      %>
      <div class="ui form">
        <div class="grouped fields">
          <label>What determines whether an iteration of a while loop should begin:</label>
          <% variants.each do |variant| %>
            <div class="field">
              <div class="ui radio checkbox">
                <input type="radio" name="example2">
                <label><%= variant %></label>
              </div>
            </div>
          <% end %>
        </div>
      </div>
  </div>
  <div class="actions">
    <div class="ui primary deny button">
      Submit
    </div>
    <div class="ui positive right button">
      I understood my mistake
    </div>
  </div>
</div>

<!-- second modal -->
<div class="ui second tiny modal">
  <i class="close icon"></i>
  <div class="header">
    Let's work this out
  </div>
  <div class="content">
    <%
      variants = [
        'true;',
        'false.'
      ]
    %>
    <div class="ui form">
      <div class="grouped fields">
        <label>What value of the control condition allows the iteration of a while loop to start:</label>
        <% variants.each do |variant| %>
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="example2">
              <label><%= variant %></label>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
  <div class="actions">
    <div class="ui primary deny button">
      Submit
    </div>
    <div class="ui positive right button">
      I understood my mistake
    </div>
  </div>
</div>


<script>
  $(function() {
    $('.ui.dropdown').dropdown();

    $('.ui.modal').modal({
      allowMultiple: false
    });
    // attach events to buttons
    $('.second.modal')
        .modal('attach events', '.first.modal .button');

    define_syntax_mode();

    cm_config = {
      viewportMargin: Infinity,
      readOnly: true,
      lineNumbers: true,
      theme: "elegant"
    };

    cm_alg = CodeMirror.fromTextArea(document.getElementById("alg"), cm_config);
    cm_trace = CodeMirror.fromTextArea(document.getElementById("trace"), cm_config);
    cm_trace.setOption("readOnly", true);
    e_alg = cm_alg.getDoc();
    e_trace = cm_trace.getDoc();

    // добавить для управляющих конструкций
    //<i class="play icon" style="font-size: .7em"></i>
    //<i class="stop icon" style="font-size: .7em"></i>

    e_alg.setValue(`while not_green -> false // waiting
    if red -> true // over_color
        wait
    else if yellow -> true
        get_ready
`);

//     e_alg.setValue(`while not_green  // waiting
//   if red  // over_color
//     wait
//   else if yellow
//     get_ready
// `);

    e_trace.setValue(`program began
 loop waiting began 1st time
  condition of loop (not_green) evaluated 1st time - false
  iteration 1 of loop waiting began
   alternative over_color began 1st time
    condition of alternative (red) evaluated 1st time - true
    branch of condition (red) began 1st time
     wait executed 1st time
    branch of condition (red) ended 1st time
   alternative over_color ended 1st time
  iteration 1 of loop waiting ended
  condition of loop (not_green) evaluated 2nd time - true
  iteration 2 of loop waiting began
   alternative over_color began 2nd time
    condition of alternative (red) evaluated 2nd time - false
    condition of alternative (yellow) evaluated 1st time - false
   alternative over_color ended 2nd time
  iteration 2 of loop waiting ended
  condition of loop (not_green) evaluated 3rd time - false
 loop waiting ended 1st time
program
`);

    function define_syntax_mode() {
      keyword_re = /(?:начался|началась|началось|began|закончился|закончилась|закончилось|ended|выполнился|выполнилась|выполнилось|executed|evaluated|calculated|если|иначе|делать|пока|для|от|до|шаг|с\s+шагом|if|else|do|while|for|from|to|with\s+step|step|каждого|в|из|по|к|foreach|each|in)(?:\s|$)/i

      struct_re = /развилка|развилки|альтернативная|ветка|branch|alternative|условия|переход|update|итерация|iteration|иначe|условие|цикла|condition|of|loop|инициализация|init|initialization|цикл|следование|sequence/i

      CodeMirror.defineSimpleMode("algtracemode", {
        // The start state contains the rules that are intially used
        start: [
          {regex: keyword_re, token: "keyword"},
          {regex: /true|false|ложь|истина/i, token: "atom"},
          {regex: /\d+(?:st|nd|rd|th)?/i,
            // /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
            token: "number"},
          {regex: /(?:\/\/|#).*/, token: "comment"},
          {regex: struct_re, token: "struct"},
          {regex: /действие|action/i, token: "action"},
          {regex: /программа|program/i, token: "program"},
          {regex: /функция|function/i, token: "function"},
          {regex: /й|раз|time/i, token: null},
          {regex: /[\wа-яё]+/i, token: "variable"}
        ],
        meta: {
          dontIndentStates: ["comment"],
          lineComment: "//"
        }
      });
    }
  });
</script>
